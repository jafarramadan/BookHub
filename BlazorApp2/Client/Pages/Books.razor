@page "/books"
@using BlazorApp2.Client.Services
@using BlazorApp2.Shared
@inject Ibook bookservice
@inject NavigationManager navigation

<h3>Books</h3>
<button class="btn btn-primary mb-3" @onclick="navigateToCreate">Add Book</button>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else if (books.Count == 0)
{
    <p>No books available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>Published Year</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.BookId</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@(book.PublishedYear.HasValue ? book.PublishedYear.ToString() : "N/A")</td>
                    <td>@(book.Quantity.HasValue ? book.Quantity.ToString() : "N/A")</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="()=>OnDelete(book.BookId)">Delete</button>
                        <button class="btn btn-success btn-sm ms-2" @onclick="()=>NavigateToEdit(book.BookId)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookModel> books;

    protected override async Task OnInitializedAsync()
    {
        books = await bookservice.GetBooksAsync();
    }

    protected async Task OnDelete(int id)
    {
        await bookservice.DeleteBookAsync(id);
        await OnInitializedAsync();
    }

    protected void navigateToCreate()
    {
        navigation.NavigateTo("/books/add");
    }

    protected void NavigateToEdit(int id)
    {
        navigation.NavigateTo($"/book/GetBookById/{id}");
    }
}
